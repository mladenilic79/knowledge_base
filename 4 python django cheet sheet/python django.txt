# ---------- INSTALL DJANGO ON WINDOWS ----------

# 1. Check your Python version by typing in the terminal : python --version   or
# 							 py

# 	B. Latest Python 3 Release Windows x86 executable installer

# 	E. Check Install for all users and add Python 3 to path

# 		(a. Open Control Panel -> System & Security -> System -> Advanced
# 	System Settings on the left
# 		b. Environment Variable button
# 		c. Select PATH and click edit
# 		d. Add c:\Pyhon34, or what ever your Python directory is
# 		if it's not already there)

# 3. Install Pip in the command line type : python -m pip install -U pip

# 4. Create a Python Virtual Environment so we don't have to worry about 
# changing dependencies that your system may not want edited. 

# 	A. Type in Command Prompt : pip install virtualenv

# 	B. Create the virtual environment for your site in command prompt :
# 	virtualenv env_mainenvironment

# !!!!!!!!!!!!!!!if already installed than just:

# 	c:\Users\M
# 	C. cd env_mainenvironment,
# 	cd Scripts,
# 	type: activate

# 5. in activated scripts folder Install Django: pip install django

# 6. Test that it works go to python cmd

# 	A. python
# 	B. import django
# 	C. django.get_version()
# 	D. You should see '1.10.2' or higher

# 7. go back to env_site1 with cd..
# 	Create a sample site : django-admin startproject samplesite

# 	A. samplesite is were your project
# 	(cd samplesite cd samplesite for additional info)

# 		i. __init__.py tells Python that this is a Python package
# 		ii. settings.py has settings for the Django project
# 		iii. urls.py a sort of table of contents for your project
# 		iv. wsgi.py serves your project
# 		B. manage.py allows you to interact with your project

# 8. Start the server go back to 1. samplesite: python manage.py runserver
# and put http://127.0.0.1:8000/ in mozilla to check

# create pools app goto:
# 	c:\Users\M\env_site1\samplesite
# and type (command for starting apps):
# 	python manage.py startapp polls

# open in pycharm project at 1. samplesite
# ______________________________________________________________________________
# ______________________________________________________________________________
# ______________________________________________________________________________
# 7 We can simulate user interaction at the view level in the shell
# in polls/models.py in the shell : python manage.py shell

# 6 Test with : python manage.py test polls

# This allows us access variable values in our templates
# We will be using our real database here
from django.test.utils import setup_test_environment

setup_test_environment()

# Create the client that we'll use to run our app
from django.test import Client

client = Client()

# Get the status code from localhost:8000/
response = client.get('/')
response.status_code

# Get the status code for localhost:8000/polls/
from django.urls import reverse

response = client.get(reverse('polls:index'))
response.status_code

# Get the HTML content
response.content

# Get the value of latest_question_list
response.context['latest_question_list']

# 11 Make sure future questions can't be accessed if the user
# guess the URL in polls/views.py

# 13 Add tests to make sure future posts aren't shown in detail

# 17 Find the current base_site.html template by typing
# this in your terminal
# python -c "import django; print(django.__path__)"
# Copy the contents of the file base_site.html in the directory templates
