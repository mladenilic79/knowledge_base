<?xml version="1.0" encoding="UTF-8"?>

<!-- xml schema default-->
<!--
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd">
-->

<!-- xml schema with context, allow for context tags -->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context.xsd">
           
<!-- allow for java annotations -->
<context:annotation-config></context:annotation-config>

<!-- component scan - tells spring to scan java files for beans instead of here in xml -->
<context:component-scan base-package="xmlConfig"></context:component-scan>

<!-- allow for properties file -->
<context:property-placeholder location="classpath:properties.properties"/>

<!-- class beans -->

<!-- old way of passing objects -->
<!-- passing class type value, for inner class no id(name) needed-->
<!--  
<bean id="stu" class="example3Objects.Student">
	<property name="id" value="1001"></property>
	<property name="mathCheat">
		<bean class="example3Objects.MathCheat"></bean>
	</property>
</bean>
-->

<!-- property tags mean spring is looking for a setter method -->
<!-- constructor tag means spring is looking for a constructor method -->
<!-- type in constructor optional.. spring can convert automatically -->
<!-- scope - setting bean scope
		singleton (default) - create only one instance (object / reference) for all requests
		prototype - create new instance (object / reference) for every request -->
<!-- init & destruct mehtod to be called on bean creating & destruction -->

<bean id="CheatMathRef" 
	class="xmlConfig.B1cheatMath" 
	scope="singleton"
	init-method="initBean"
	destroy-method="destroyBean">
</bean>

<bean id="CheatScienceRef" class="xmlConfig.B2cheatScience"></bean>

<!-- setters & constructors -->

<bean id="D1studentXMLclassSetterBean" class="xmlConfig.D1studentXMLclass">
	<property name="id" value="1002"></property>
	<property name="name" value="zika"></property>
	<property name="mathCheat" ref="CheatMathRef"></property>
</bean>

<bean id="D2studentXMLinterfaceConstructorBean" class="xmlConfig.D2studentXMLinterface">
	<constructor-arg name="id" value="1003" type="int"></constructor-arg>
	<constructor-arg name="name" value="pera" type="java.lang.String"></constructor-arg>
	<constructor-arg name="cheat" ref="CheatScienceRef"></constructor-arg>
</bean>

<!-- autowiring -->
<!-- setter will try to match by type.. if failed will try to match by name -->

<!-- change name for autowiring by name (if needed be) -->
<bean id="cheat" class="xmlConfig.B2cheatScience"></bean>

<!-- match object name with bean id attribute -->
<bean id="studentXMLannotationAutowiringByNameBean" class="xmlConfig.D2studentXMLinterface" autowire="byName">
	<property name="id" value="1005"></property>
	<property name="name" value="mika"></property>
</bean>

<!-- match object type with bean class attribute -->
<bean id="studentXMLannotationAutowiringByTypeBean" class="xmlConfig.D1studentXMLclass" autowire="byType">
	<property name="id" value="1006"></property>
	<property name="name" value="dule"></property>
</bean>

<!-- when ever you find the constructor for the dependency do the injection -->
<bean id="studentXMLannotationAutowiringConstructorBean" class="xmlConfig.D2studentXMLinterface" autowire="constructor">
	<constructor-arg name="id" value="1007"></constructor-arg>
	<constructor-arg name="name" value="paja"></constructor-arg>
</bean>

<!-- autowiring with java annotations -->

<!-- put annotation in constructor or setter -->
<bean id="D3studentXMLAnnotationBean" class="xmlConfig.D3studentXMLAnnotation">
	<property name="id" value="1006"></property>
	<property name="name" value="dule"></property>
</bean>

<!-- put annotation above variables -->
<bean id="D4studentXMLAnnotationDirectBean" class="xmlConfig.D4studentXMLAnnotationDirect">
	<property name="id" value="1006"></property>
	<property name="name" value="dule"></property>
</bean>

<!-- properties -->

<bean id="D5studentXMLpropertiesBean" class="xmlConfig.D5studentXMLproperties">
	<property name="id" value="${randomStudent.id}"></property>
	<property name="name" value="${randomStudent.name}"></property>
</bean>

<bean id="D6studentXMLpropertiesAnnotationsBean" class="xmlConfig.D6studentXMLpropertiesAnnotations"></bean>

</beans>