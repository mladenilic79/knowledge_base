
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
node version manager nvm & node

INSTALL
#install node version manager https://github.com/nvm-sh/nvm
$ curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash
#or
$ wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash
#and then
$ nvm install node

	TEST
	#test if node working with custom build library for starting js/react projects
	$ npm i -g devcamp-js-builder
	#create new project in js
	$ js-generate
	#enter newly created test project folder

	#stay in newly created project directory
	#test node pack manager
	$ npm install

	#stay in newly created project directory
	#test if react working with
	$ npm start
	#last output will be "compiled successfully." meaning that server is running
	#confirm with http://localhost:3000/

COMMANDS

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
heroku cli

INSTALL
The Heroku CLI requires Git, the popular version control system. 
If you donâ€™t already have Git installed, complete the following before installing the CLI:
Git installation
First-time Git setup

$ sudo snap install --classic heroku

create account on heroku if you don't have one yet

	TEST
	login to heroku from terminal with
	$ heroku login

	#stay in newly created project directory?????
	#test heroku with (put some random name)
	$ heroku create putrandomnamehere

	#stay in newly created project directory
	$ git init (all from newly created project)
	$ git add .
	$ git commit -m "testing heroku"

	#stay in newly created project directory
	#go to heroku & there will be app with name putted
	#go to deploy and get git line from there
	$ heroku git:remote -a randomprojectname

	#stay in newly created project directory
	#recheck with
	$ git remote -v

	#stay in newly created project directory
	#push to heroku
	$ git push heroku master

COMMANDS

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
rvm ruby version manager & ruby

INSTALL
$ gpg --keyserver hkp://pool.sks-keyservers.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB

$ sudo apt-get install software-properties-common
$ sudo apt-add-repository -y ppa:rael-gc/rvm
$ sudo apt-get update
$ sudo apt-get install rvm

#At terminal window, click Edit > Profile Preferences, 
#click on Title and Command tab and check Run command as login shell.

#reboot pc

$ rvm install ruby
#or specific version
$ rvm install 2.3.3

#down download & install gems documentation
$ echo "gem: --no-document" >> ~/.gemrc

#install bundler gem (to be used in rails)
$ gem install bundler

#install nokogiri gem (rails needs it)
$ gem install nokogiri

#install rails
$ gem install rails

( ??? update from rails 5 to rails 6:
	$ rails webpacker:install
	have some dependacies.. check website
	https://github.com/rails/webpacker
)

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
rvm ruby version manager & ruby testing & commands

#manuals
$ man rvm

#list all versions of ruby
$ rvm list

#pick ruby to use
$ rvm use 2.3.3
#or for latest
$ rvm use ruby

#run this command before running default command or maybe some other commands
#(for linux mint & ubuntu)
#(follow these links for explanation)
https://stackoverflow.com/questions/13037641/ruby-keeps-reverting-to-an-old-version
https://askubuntu.com/questions/444880/why-do-i-need-to-run-bin-bash-login
$ /bin/bash --login

#set default version of ruby to run on boot
$ rvm --default use 2.3.3

#check for gem version
$ gem -v

#see all gemsets
$ rvm gemset list

#see all gems
$ gem list

#To remove the ruby version and keep the gemsets:
$ rvm uninstall VERSION_NUMBER
#To remove ruby and its associated gemsets:
$ rvm remove VERSION_NUMBER

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
rails

APP CREATION & TESTING
#create rails app project in specified folder

#(<<-T>> -skips tests; <<-d database>> or <<--database=postgresql>> -choose database type; <<--api>> api variant rails install)
$ rails new <<name>> -T -d postgresql
$ rails new <<name>> -T --database=postgresql

#enter newly created project!!!!!!!!!!

#change some config file in projects database for default access
	$ subl config/database.yml
	#add 3 lines below the pool (localhost & created user & pass for database)
		pool: <%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %>
		host: localhost
		username: masteruser
		password: root

#create development & test databases from inside the project folder with
$ rails db:create
#update database tables on our system, run after every change  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
$ rails db:migrate

	#create one feature for testing purposes
	$ rails g scaffold Guide title:string
	($ rails db:migrate)

	#start rails app from inside the project folder with
	$ rails s

	#check browser
	localhost:3000
	localhost:3000/guides
	#enter guidename and click create guide.. if that works entire system works

	#exit rails server
	crtl-d
	#or
	exit

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
rails/rake commands

#rails help menu
$ rails -h

#deletes the database (for the current environment)
$ rails db:drop
#deletes the database (for all environments)
$ rails db:drop:all

#creates database (for the current environment)
$ rails db:create
#creates database (for all environments)
$ rails db:create:all

#runs migrations for current environment that have not run yet
$ rails db:migrate

#seed data from seed.rb file
$ rake db:seed

#loading existing schema to existing database
$ rake db:schema:load

#advanced combo commands
#runs db:create/db:schema:load/db:seed
$ rails db:setup
#runs db:drop/db:setup (db:drop/db:create/db:schema:load/db:seed)
$ rails db:reset
#runs runs db:drop/db:create/db:migrate
$ rails db:migrate:reset 

#returns all reserved resources-routes from inside the project folder with
$ rake routes
#same as
$ rails routes
#filter by some_word
$ rake routes | grep some_word
#gives: method that can be used in code to refer to link, verb, browser path, controller/method(action)

#rails console (direct access to database)
$ rails c

#Spring is a Rails application preloader. It speeds up development by keeping your application running in the background so you don't need to boot it every time you run a test, rake task or migration
$ spring start
$ spring stop
$ spring status

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
rails generator g commands

#default schema
$ rails g <<typeOfGenerator>> <<featureName>> <<attributes:dataType>>

#create scaffold (creates everything)
$ rails g scaffold Blog title:string body:text

#create controller (creates bare bones controller & views)
$ rails g controller Pages home about contact

#create model (creates db & model)
$ rails g model Blog random_name:string random_number:integer

#create resource (creates bare bones file structure for everything, like skinny scaffold)
$ rails g resource Portfolio title:string subtitle:string body:text main_image:text thumb_image:text

#changing database tables with migration command; add_field(slug)_to_table(blogs); type of filed to be added (slug:string:uniq)
$ rails g migration add_slug_to_blogs slug:string:uniq
$ rails g migration add_post_status_to_blogs status:integer
#and it the end always
$ rails db:migrate

#connecting tables with migration & reference command
$ rails g migration add_parent_reference_to_child parent:references

#connection tables with create command & inputing foreign key from start
$ rails g model Technology name:string portfolio:references

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
rails console/database commands

#after any changes in code you can leave the console & come back or you can:
> reload!

#insert/create######################################

> Skill.create!(title: "Rails", percent_utilized: 75)
> pera = Blog.create!(title: 'asdfasdf', body: 'asdfasd')
#create with nesting hashes
> Portfolio.create!(title: "web app", subtitle: "asdf", body: "asdf", technologies_attributes: [{name: 'Ruby'}, {name: 'rails'}, {name: 'angular'}, {name: 'ionic'}])
> Portfolio.last.technologies.create!(name: "Technology")
> Blog.create!(blog_name:"sima", blog_number:"3", parent_id:"3")

#update#############################################

#update using dynamicly created custom methods here based on enum in model?
> Blog.first.published!
> Blog.last.published!
> User.update_all(name: "jordan")

#delete#############################################

#delete last item
> portfolio.delete
#destroy more safe? wrapped & have callbacks
> portf = portfolio.last
> portf.destroy

#query/return#######################################

#querying return all
> Blog.all
#count number of records
> Blog.count
#first & last records
> Blog.first
> Blog.last
#average sale
> Book.average(:sales)
#maximum sale
> Book.maximum(:sales)
#sorting
> Book.order('sales DESC')
#returns top book author name
> Book.order('sales DESC').first.author.name

> Book.includes(:author, :genre)
	#same as but like SELECT author & genre instead of SELECT *
	> Book.all

#find keyword returns single item
> Portfolio.find(5)
> Book.find_by_title("the force")
> Book.find_by_title("the force").author
> leia = Author.find_by_name("Leia")
> leia.books
> leia.books.any?
> leia.books.sum(:sales)
	#same as
	<<SELECT SUM("books"."sales") FROM "books" WHERE "books"."author_id" = $1>>

#where keyword returns collection
> Portfolio.where(subtitle: "ruby on rails")
> Portfolio.where(subtitle: "ruby on rails").count
> Portfolio.where(subtitle: "ruby on rails").first.author

#pluck keyword returns list of strings/symbols instead of list of whole objects
> Genre.pluck(:name)
	#insted of
	<< > Genre.all >>

#return all published with dynamicly created custom methods here based on enum in model?
> Blog.published
> Blog.published.count
> Portfolio.last.subtitle
> Blog.last.published?
> Blog.last.draft?
#returns collection
> author.first.genres
#return specific record
> vader

#calling on parent item#############################
> p = Portfolio.last
> p.technologies.crate!(name: "ruby")

#sql commands#######################################
> Book.find_by_sql("SELECT books.* FROM books")

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
installing & using gems

###################
BASICS

#gemfile
gem 'rubocop', '~> 0.74.0'

#and run inside the project?
$ bundle install

#or install manually in terminal
$ gem install devise -v 4.2.0

#run for info
$ bundle info rubocop

#uninstall gem
$ gem uninstall rubocop

###################
SPECIFIC GEMS

#installing friendly id gem for use in permalinks, follow the instructions on
https://github.com/norman/friendly_id
#put in gem file
gem 'friendly_id', '~> 5.2.4'
#and run
$ bundle install
#add a slug column to desired database table which have the value that will be used for permalinks (blogs in this example)
$ rails g migration add_slug_to_blogs slug:string:uniq
#gives configuration files to be used in future generations
$ rails generate friendly_id
$ rails db:migrate
#extend friendlyid into model class with data to be used for permalinks (see instructions) & set name to be the one you want
#add <<friendly>> method in controller in set mehtod (see instructions)
#generate slugs for existing data (access & update the slug field)(blogs in this example)
$ Blog.find_each(&:save)

#authenication with devise
gem 'devise', '~> 4.2'
$ bundle install
$ rails generate devise:install
#set email sender in devise.rb
#go through all 4 steps in guide ( guide appers on command <<$ rails generate devise:install>>)
#create users
$ rails generate devise User
#go to migration file for <create user> and add under <database authenticatable>
	## custom fields
	t.string :name
$ rails db:migrate
#add buttons for register, login, logout in views/layout/application.html.erb
#add class field for :name in views/devise/registrations/edit.html.erb & new.html.erb
#add file devise.whitelist.rb in controllers/concers
#add include DeviseWhitelist in application controller

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
rails precompiling css files
follow error and paste specified command to specified file

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

point of interest 2

	app/controllers/blogs_controller.rb
	app/controllers/concerns/
	app/helpers/application_helper.rb
	app/models/blog.rb
	app/views/blog/index.html.erb
	app/views/layouts/application.html.erb
	config/application.rb (main method)
	config/database.yml (database login data)
	config/routes.rb
	db/
	lib/templates/

point of interest 3 (primary comments on blogs vertical)

	app/views/
	app/controllers/
	app/helpers/
	app/models/
	config/application.rb (main method)
	config/database.yml (database login data)
	config/routes.rb
	db/
	lib/templates/

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
questions

toggle: routes, model/blog, controller/blogs_controller 2x
source: helpers/application_helper, controllers/concerns/set_source, views/layouts/application
super: controller/concern/current_user_concern
form_with: views/blogs/index
layout: controllers/blogs_controller, views/layout/application + other layouts if needed, helpers/application_helper

devise: routes, model/blog, helpers/application_helper, contoller_concern/current_user, controller_concern/devise_whitelist, views/view_cheet_sheet
friendly id: model/blog, controller/blog_controller

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
radi jos na:

views/shared/_shared - kreiraj neki shared
lib/templates - ubacio stari.. obrisi i napravi novi

